@startuml Manufacturing System Class Diagram

' Style and theme configuration
!theme plain
skinparam linetype polyline
skinparam nodesep 50
skinparam ranksep 50
skinparam packageStyle rectangle
skinparam padding 5
skinparam classFontSize 12
skinparam classAttributeFontSize 11
skinparam classFontName Arial
skinparam classBackgroundColor #F0F8FF
skinparam classArrowColor #2F4F4F
skinparam classBorderColor #008B8B
skinparam defaultTextAlignment center
skinparam handwritten false

' Layout settings
left to right direction
hide empty members
hide empty fields

' Title
title Manufacturing Company System - Class Diagram

' Packages
package "component" {
  interface Component {
    +getCost(): double
    +getWeight(): double
    +getName(): String
    +checkStockAvailability()
    +deductStock()
    +addStock()
    +getRequiredComponents()
  }
  
  abstract class BasicComponent {
    #name: String
    #unitCost: double
    #unitWeight: double
  }
  
  class RawMaterial
  class Hardware
  class Paint
  
  class Product {
    -name: String
    -requiredComponents: Map
    +addComponent()
    -hasCircularDependency()
  }
  
  package "factory" {
    class ComponentFactory <<static>> {
      +createComponent()
      +createProduct()
    }
  }
}

package "process" {
  interface ProcessState {
    +handleProcess()
    +isTerminal()
    +getStateContext()
  }
  
  class WaitingForStockState
  class InManufacturingState
  class CompletedState
  class FailedState
  
  enum ManufacturingOutcome {
    COMPLETED
    FAILED_STOCK_SHORTAGE
    FAILED_SYSTEM_ERROR
    FAILED_DAMAGED_COMPONENT
  }
  
  class ManufacturingProcess {
    -product: Product
    -inventoryManager
    -currentState: ProcessState
    -finalOutcome
    -observers: List
    +addObserver()
    +removeObserver()
    +setState()
    +process()
    +isCompleted()
  }
}

package "observer" {
  interface ProcessObserver {
    +onStateChange()
    +onProcessCompleted()
  }
  
  class ConsoleLogger
}

package "system" {
  class InventoryManager {
    -stockLevels: Map
    +setInitialStock()
    +checkStock()
    +deductStock()
    +addStock()
  }
  
  class ManufacturingOrder {
    -product: Product
    -quantity: int
  }
  
  class DataLoader {
    -basicComponentsMap: Map
    +loadDataAndInitialize()
  }
  
  class ReportGenerator {
    +generateReport()
  }
  
  class ManufacturingSystem {
    -componentsFilePath
    -productsFilePath
    -controller
    +run()
  }
  
  class ManufacturingController {
    -dataLoader
    -inventoryManager
    -reportGenerator
    -consoleLogger
    +processManufacturingOrders()
  }
}

class Main {
  +main(args: String[])
}

' Relationships (Inheritance)
Component <|.. BasicComponent
BasicComponent <|-- RawMaterial
BasicComponent <|-- Paint
BasicComponent <|-- Hardware
Component <|.. Product

ProcessState <|.. WaitingForStockState
ProcessState <|.. InManufacturingState
ProcessState <|.. CompletedState
ProcessState <|.. FailedState

ProcessObserver <|.. ConsoleLogger

' Associations
Product "1" *-- "0..*" Component : contains >
ManufacturingProcess "1" o-- "1" ProcessState : currentState >
ManufacturingProcess "1" o-- "1" Product : manufactures >
ManufacturingProcess "1" o-- "1" InventoryManager : uses >
ManufacturingProcess "1" o-- "1" ManufacturingOutcome : records >
ManufacturingProcess "1" o-- "0..*" ProcessObserver : notifies >
ManufacturingOrder "1" o-- "1" Product : references >
DataLoader ..> ComponentFactory : uses >
ComponentFactory ..> Component : creates >
ComponentFactory ..> Product : creates >
ManufacturingSystem "1" *-- "1" ManufacturingController : delegates to >
ManufacturingController "1" *-- "1" InventoryManager : manages >
ManufacturingController "1" *-- "1" DataLoader : uses >
ManufacturingController "1" *-- "1" ReportGenerator : uses >
ManufacturingController "1" *-- "1" ConsoleLogger : uses >
ManufacturingController ..> ManufacturingProcess : creates >
Main ..> ManufacturingSystem : uses >

@enduml 